 @page "/resourceOverview"
@using ResourceMaster.Services.CustomerService
@using ResourceMaster.ViewModels
@using MudBlazor
@inject ResourceService ResourceService;
@inject NavigationManager NavigationManager;

<MudText Typo="Typo.h6">Resource Overview</MudText>
<MudDataGrid T="ResourceViewModel" Items="@resources" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Virtualize="true" FixedHeader="true" Height="800px">
    <ToolBarContent>
        <MudButton OnClick="@GoToNewResource" Variant="Variant.Filled" Color="Color.Primary">Add Item</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="filter" Placeholder="Filter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="ResourceViewModel" />
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.FirstName" Title="First Name" />
        <PropertyColumn Property="x => x.LastName" Title="Last Name" />
        <PropertyColumn Property="x => x.Age" Title="Age" />
        <PropertyColumn Property="x => x.Street" Title="Street" />
        <PropertyColumn Property="x => x.ZipCode" Title="Zip Code" />
        <PropertyColumn Property="x => x.Location" Title="Location" />
        <PropertyColumn Property="x => x.Country" Title="Country" />
        <TemplateColumn StickyRight="true" CellStyle="width:10px" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn StickyRight="true" CellStyle="width:10px" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn StickyRight="true" CellStyle="width:10px" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.CalendarMonth" Size="@Size.Small" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Skill List</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList Dense="true">
                    @foreach (var skill in context.Item.Skills)
                    {
                        <MudListItem Text=@skill.Skill.SkillName />
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
</MudDataGrid>

@code {
    private string filter = "";
    private IEnumerable<ResourceViewModel> resources = new List<ResourceViewModel>();

    private Func<ResourceViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(filter))
            return true;

        var filterLower = filter.ToLowerInvariant();

        if (x.Id.ToString().Contains(filterLower))
            return true;

        if (x.FirstName != null && x.FirstName.ToLowerInvariant().Contains(filterLower))
            return true;

        if (x.LastName != null && x.LastName.ToLowerInvariant().Contains(filterLower))
            return true;

        if (x.Age.ToString().Contains(filterLower))
            return true;

        if (x.Street != null && x.Street.ToLowerInvariant().Contains(filterLower))
            return true;

        if (x.ZipCode != null && x.ZipCode.ToLowerInvariant().Contains(filterLower))
            return true;

        if (x.Location != null && x.Location.ToLowerInvariant().Contains(filterLower))
            return true;

        if (x.Country != null && x.Country.GetDisplayName().ToLowerInvariant().Contains(filterLower))
            return true;

        return false;
    };

    void GoToNewResource()
    {
        NavigationManager.NavigateTo("/createResource");
    }

    protected override async Task OnInitializedAsync()
    {
        resources = await ResourceService.GetAllAsync();
    }
}
