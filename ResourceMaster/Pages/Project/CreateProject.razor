@page "/createProject"
@page "/createProject/{id:int}"
@using ResourceMaster.ViewModels
@using MudBlazor
@using ResourceMaster.Services.CustomerService
@inject ISnackbar Snackbar
@inject ProjectService _ProjectService
@inject CustomerService _CustomerService
@inject SkillService _SkillService

@if (IsEditPage)
{
    <h1>Update project</h1>
}

else
{
    <h1>Create new project</h1>
}


<br>
<h3>Project</h3>
<MudForm onsubmit="@HandleSubmit" Model="_project">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="_project.ProjectName" Label="Project name" id="projectName" Variant="Variant.Outlined"/>
        </MudItem>
        <br/>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker Label="Project start" @bind-Date="_project.ProjectStart"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker Label="Project end" @bind-Date="_project.ProjectEnd"/>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudSelect @bind-Value="_project.Customer" Label="Select customer">
                @foreach (CustomerViewModel item in _customerList)
                {
                    <MudSelectItem Value="@item">@item.CompanyName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <SkillSelection skills="@_project.Skills" skillOptions="@_skillOptions" OnItemSelected="skills => _project.Skills = skills"/>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" Class="my-4 text-center">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Large"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit">
                Add project
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code{
    [Parameter]
    public int Id { get; set; }

    private bool IsEditPage => Id > 0;

    private ProjectViewModel _project = new();
    private List<CustomerViewModel> _customerList = new();
    private List<SkillViewModel> _skillOptions = new();

    protected override async Task OnInitializedAsync()
    {
        _skillOptions = (await _SkillService.GetAllAsync()).ToList();
        _customerList = (await _CustomerService.GetAllAsync()).ToList();
    }


    private async Task HandleSubmit()
    {
        if (IsEditPage)
        {
            await _ProjectService.Update(_project);
            Snackbar.Add("Successfully updated " + _project.ProjectName);
        }
        else
        {
            await _ProjectService.Update(_project);
            Snackbar.Add("Successfully added " + _project.ProjectName);
          
        } 
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsEditPage)
        {
            _project = await _ProjectService.GetSingle(Id);
        }
    }

}
