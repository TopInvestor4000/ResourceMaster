@using ResourceMaster.ViewModels
@using MudBlazor
<!-- Skills -->
<MudItem xs="12" sm="6">
    <MudPaper Class="pa-4">
        <MudStack Row="true">
            <MudAvatar Image="/skill.jpg" Size="Size.Large"/>
            <MudStack Justify="Justify.Center" Spacing="0">
                <MudText Class="resource-header">Skill</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <MudPaper Class="pa-4 equal-height-second-box">
        <MudStack Spacing="4" Class="flex-grow">
            <MudStack Row="true" Spacing="4">
                <MudAutocomplete T="string" Label="Skill" @bind-Value="selectedSkill" SearchFunc="@SkillSearch"/>
                <MudSelect Label="Skill Level" T="string" @bind-Value="selectedLevel">
                    @foreach (var levelOption in levelOptions)
                    {
                        <MudSelectItem Value="@levelOption"/>
                    }
                </MudSelect>
                <MudCheckBox @bind-Checked="isCertified" Label="Certified"/>
            </MudStack>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12" Class="text-center add-skill-button">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSkill">Add Skill</MudButton>
                </MudItem>
            </MudGrid>
        </MudStack>
    </MudPaper>
</MudItem>
<MudList>
    @foreach (var skill in skills)
    {
        <SkillElement skill="@skill"></SkillElement>
        <MudItem xs="12" sm="4" md="3">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => RemoveSkill(skill))">Delete</MudButton>
        </MudItem>
    }
</MudList>

@code {

    [Parameter]
    public EventCallback<List<SkillViewModel>> OnItemSelected { get; set; }

    [Parameter]
    public List<string> skillOptions { get; set; }
    private List<string> levelOptions = new List<string> { "Poor", "Mediocre", "God" };
    private string selectedSkill = "";
    private string selectedLevel = "";
    private bool isCertified;
    private List<string> availableSkillOptions;
    private List<SkillViewModel> skills = new();
    
    protected override void OnInitialized()
    {
        availableSkillOptions = new List<string>(skillOptions);
    }
    
    private void ItemSelected()
    {
        OnItemSelected.InvokeAsync(skills);
    }

    private void AddSkill()
    {
        if (!string.IsNullOrEmpty(selectedSkill) && !string.IsNullOrEmpty(selectedLevel))
        {
            skills.Add(new SkillViewModel { SkillName = selectedSkill, Level = selectedLevel, Certified = isCertified });
        }
        
        availableSkillOptions.Remove(selectedSkill);
        SortSkills();
        
        selectedSkill = string.Empty;
        selectedLevel = string.Empty;
    }
    
    private async Task<IEnumerable<string>> SkillSearch(string value)
    {
    
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return availableSkillOptions;
        return availableSkillOptions.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void RemoveSkill(SkillViewModel skill)
    {
        skills.Remove(skill);
        availableSkillOptions.Add(skill.SkillName);
        SortSkills();
    }

    private void SortSkills()
    {
        skillOptions.Sort();
        availableSkillOptions.Sort();
    }

}

<style>
    .add-skill-button{
        margin-top: 20px;
    }
</style>
