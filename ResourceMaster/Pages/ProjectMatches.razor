@page "/projectMatches/{projectId:int}"
@using ResourceMaster.Services.CustomerService
@using ResourceMaster.Services.MatchingService
@using ResourceMaster.ViewModels
@using MudBlazor
@inject ResourceService ResourceService;
@inject MatchingService MatchingService;
@inject ProjectService ProjectService;

<MudTable Items="@resources" Bordered="@true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Resource </MudText>
     </ToolBarContent>
    <HeaderContent>
        <MudTh>First name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh>Age</MudTh>
        <MudTh>Skills</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last name">@context.LastName</MudTd>
        <MudTd DataLabel="age">@context.Age</MudTd>
        <MudTd DataLabel="skills">
            @(context.Skills != null && context.Skills.Count > 0
                ? string.Join(", ", context.Skills.Select(s => s.SkillName))
                : "Kein Skill vorhanden")
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public int projectId { get; set; }

    private List<ResourceViewModel> resources = new List<ResourceViewModel>();

    private List<SkillViewModel> skillList1 = new()
    {
        new SkillViewModel()
    };

    private List<SkillViewModel> skillListProject = new()
    {
      new SkillViewModel()
    };

    private List<SkillViewModel> skillList2 = new()
    {
        new SkillViewModel(),
    };
    //private ProjectViewModel currentProject;

    protected override async Task OnInitializedAsync()
    {
        // projectId = int.Parse(RouteData.Values["projectId"].ToString());
        var currentProject = await ProjectService.GetSingle(projectId);
        currentProject.Skills = skillListProject;

        var allResource = (await ResourceService.GetAllAsync()).ToList();

        for (int i = 0; i < allResource.Count; i++)
        {
            if (i % 2 == 0)
            {
                allResource[i].Skills = skillList2;
            }
            else
            {
                allResource[i].Skills = skillList1;
            }
        }

        resources = (MatchingService.MatchResourcesToProject(currentProject, allResource));
    }


}
