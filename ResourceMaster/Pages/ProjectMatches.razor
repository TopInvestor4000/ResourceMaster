@page "/projectMatches/{projectId:int}"
@using ResourceMaster.Services.CustomerService
@using ResourceMaster.Services.MatchingService
@using ResourceMaster.ViewModels
@using MudBlazor
@inject ResourceService ResourceService;
@inject MatchingService MatchingService;
@inject ProjectService ProjectService;

<MudTable Items="@resources" Bordered="@true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Resource </MudText>
     </ToolBarContent>
    <HeaderContent>
        <MudTh>First name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh>Age</MudTh>
        <MudTh>Best skill</MudTh>
        <MudTh>Best score of best skill</MudTh>
        <MudTh>Overall project score</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First name">@context.Resource.FirstName</MudTd>
        <MudTd DataLabel="Last name">@context.Resource.LastName</MudTd>
        <MudTd DataLabel="age">@context.Resource.Age</MudTd>
        <MudTd DataLabel="Best skill">@context.BestSkill.SkillName</MudTd>
        <MudTd DataLabel="Best score of best skill">@context.BestScore</MudTd>
        <MudTd DataLabel="Overall project score">@context.BestOverallScore</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public int projectId { get; set; }

    private List<MatchingResourceViewModel> resources = new();
    
    protected override async Task OnInitializedAsync()
    {
        // projectId = int.Parse(RouteData.Values["projectId"].ToString());
        var currentProject = await ProjectService.GetSingle(projectId);

        resources = (await MatchingService.MatchResourcesToProjectAsync(currentProject));
    }


}
